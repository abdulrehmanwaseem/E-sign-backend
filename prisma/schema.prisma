generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(cuid())
  email            String      @unique
  password         String?     // Optional for OAuth users
  firstName        String?
  lastName         String?
  avatar           String?
  provider         String?     // "google", "apple", "credentials"
  providerId       String?     // OAuth provider's user ID
  isEmailVerified  Boolean     @default(false)
  phone            String?
  isPhoneVerified  Boolean     @default(false)
  otp              String?
  otpExpires       DateTime?
  phoneOtp         String?
  phoneOtpExpires  DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  role             UserRole    @default(USER)
  userType         UserType    @default(FREE)
  device           String?     // JSON.stringify
  stripeCustomerId String?     @unique // Stripe customer ID for subscriptions

  isTemplatePicked Boolean @default(false)

  subscriptionStatus String?   // active, canceled, past_due, etc.
  currentPeriodEnd   DateTime? // When monthly subscription expires

  documents Document[]
  locations UserLocation[]

  @@unique([provider, providerId])
}

model UserLocation {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  city      String?
  region    String?
  country   String?
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
}

model Blog {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  canonicalUrl    String?
  metaTitle       String?
  metaDescription String?
  image           String?
  imagePublicId   String?
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  fileUrl     String
  publicId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id           String            @id @default(cuid())
  name         String
  fileName     String
  fileType     String
  filePath     String
  publicId     String
  extension    String
  accessToken  String            @unique @default(cuid())
  status       DocumentStatus    @default(PENDING)
  signedAt     DateTime?
  signedPdfUrl String?
  createdById  String
  isLibraryFile Boolean          @default(false)
  expiresAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  customRecipientMessage         String?          

  // Relations
  createdBy   User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
  recipients  DocumentRecipient[]
  fields      SignatureField[]
  activities  DocumentActivity[]

  @@index([createdById])
  @@index([status])
}

model DocumentRecipient {
  id                       String             @id @default(cuid())
  name                     String
  email                    String
  phone                    String?
  phoneVerificationRequired Boolean           @default(false)
  isPhoneVerified          Boolean           @default(false)
  phoneOtp                 String?
  phoneOtpExpires          DateTime?
  accessToken              String             @unique @default(cuid())
  signedAt                 DateTime?
  viewedAt                 DateTime?
  documentId               String
  status                   String             @default("PENDING") // PENDING, SIGNED
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt

  // Relations
  document   Document            @relation(fields: [documentId], references: [id], onDelete: Cascade)
  fields     SignatureField[]
  activities DocumentActivity[]

  @@index([email])
  @@index([accessToken])
  @@index([documentId])
}

model SignatureField {
  id          String           @id @default(cuid())
  documentId  String
  recipientId String
  fieldId     String           // Frontend field ID
  font        String?         @default("signature")
  fieldType   FieldType
  pageNumber  Int
  xPosition   Float
  yPosition   Float
  width       Float
  height      Float
  fieldValue  String?          // Value when signed
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  document  Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  recipient DocumentRecipient  @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([documentId, recipientId])
}

model DocumentActivity {
  id          String            @id @default(cuid())
  documentId  String
  recipientId String?
  action      ActivityAction
  ipAddress   String?
  userAgent   String?
  details     Json?
  createdAt   DateTime          @default(now())

  // Relations
  document   Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  recipient  DocumentRecipient? @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum UserType {
  FREE
  PRO
}

enum DocumentStatus {
  SIGNED
  PENDING
  PARTIAL   // Some recipients signed
  CANCELLED
  EXPIRED
}

enum FieldType {
  SIGNATURE
  FULLNAME
  DATE
  EMAIL
  TITLE
  ADDRESS
  INITIALS
  TEXT
}

enum ActivityAction {
  CREATED
  SENT
  VIEWED
  SIGNED
  COMPLETED
  CANCELLED
  DOWNLOADED
}
