generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String?  // Optional for OAuth users
  firstName     String?
  lastName      String?
  avatar        String?
  provider      String?  // "google", "apple", "credentials"
  providerId    String?  // OAuth provider's user ID
  isEmailVerified Boolean @default(false)
  phone         String?
  isPhoneVerified Boolean @default(false)
  otp           String?
  otpExpires    DateTime?
  phoneOtp      String?
  phoneOtpExpires DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  documents       Document[]

  @@unique([provider, providerId])
}

model Template {
  id          String            @id @default(cuid())
  name        String            // Template name (e.g., "Employment Contract")
  description String?           // Brief description of the template
  category    TemplateCategory  // Category enum
  fileUrl     String            // Cloudinary URL or file path
  publicId    String            // Cloudinary public_id
  fileSize    BigInt?           // File size in bytes

  // Simple metadata
  usageCount      Int               @default(0) // Track how many times used

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@index([category])
}

model Document {
  id                 String            @id @default(cuid())
  name               String            
  fileName           String
  fileType           String            
  filePath           String            
  publicId           String            // Store Cloudinary public_id for deletion
  extension          String            // File extension (e.g., pdf, docx)
  accessToken        String            @unique @default(cuid()) // Unique access token per document
  status             DocumentStatus    @default(PENDING)
  signedAt           DateTime?         // Track signing at document level
  signedPdfUrl       String?           // URL of the signed PDF with embedded signatures
  createdById        String
  recipientId        String            // Removed @unique to allow multiple docs per recipient
  isLibraryFile     Boolean  @default(false)

  expiresAt          DateTime?

  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relations
  createdBy          User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  recipient          DocumentRecipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  fields             SignatureField[]
  activities         DocumentActivity[]

  @@index([createdById])
  @@index([status])
  @@index([recipientId]) // Add index for better query performance
}

model DocumentRecipient {
  id            String           @id @default(cuid())
  name          String
  email         String
  phone         String?
  accessToken   String           @unique @default(cuid())
  signedAt      DateTime?
  viewedAt      DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations - One recipient can have multiple documents
  documents     Document[]        
  fields        SignatureField[]

  @@index([email])
  @@index([accessToken])
}

model SignatureField {
  id            String            @id @default(cuid())
  documentId    String
  recipientId   String
  fieldId       String            // Your frontend field ID
  fieldType     FieldType
  pageNumber    Int
  xPosition     Float
  yPosition     Float
  width         Float
  height        Float
  fieldValue    String?           // Actual signed/filled value
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  // Relations
  document      Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  recipient     DocumentRecipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([documentId, recipientId])
}

model DocumentActivity {
  id            String         @id @default(cuid())
  documentId    String
  recipientId   String?
  action        ActivityAction
  ipAddress     String?
  userAgent     String?
  details       Json?
  createdAt     DateTime       @default(now())
  
  // Relations
  document      Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
}

// Enums
enum DocumentStatus {
  SIGNED
  PENDING
  CANCELLED
  EXPIRED
}

enum FieldType {
  SIGNATURE
  FULLNAME
  DATE
  EMAIL
  TITLE
  ADDRESS
  INITIALS
  TEXT
}

enum ActivityAction {
  CREATED
  SENT
  VIEWED
  SIGNED
  COMPLETED
  CANCELLED
  DOWNLOADED
}

enum TemplateCategory {
  BUSINESS
  LEGAL
  EDUCATION
  HEALTHCARE
  REAL_ESTATE
  EMPLOYMENT
  FINANCE
  PERSONAL
  GOVERNMENT
  OTHER
}